#summary A simplified custom grade book for the SWF Activity Module in Moodle
#labels Featured

== Introduction ==

This page describes the SWF Activity Module grade book. This is currently in development and not yet available.

== Why create a separate grade book? ==

Over the last two versions of Moodle (1.8 and 1.9), the grade book has undergone substantial changes and Moodle 2.0 is likely to make yet more. Pushing grades into Moodle's grade book across different versions is problematic, poorly documented, and overly complicated due to the lack of an effective grade book API. The SWF Activity Module grade book will be a "no frills" basic implementation of recording user data (grades, scores, times, etc.) as a temporary measure until the Moodle grade book API issue is resolved (which may not be any time soon!).

----

== Overview ==

So far, the grade book consists of a single database table with the following columns:

  * id:INT - auto-increment key
  * courseid:INT - Moodle course ID
  * instanceid:INT - Moodle module instance ID
  * swfid:INT - SWF Activity Module ID
  * starttime:INT - Server time at start of activity
  * endtime:INT - Server time at end of activity
  * grade:INT - Users' grades
  * maxgrade:INT - Maximum grade allowed (for weighting grades)
  * answered:TEXT - CSV list of users' answers to questions for interaction analysis
  * timecreated:INT - Time record was created
  * timemodified:INT - Time record was last modified

----

== Notes ==

Users may have multiple instances of the same Moodle course and SWF IDs. This allows users to make a number of attempts at a learning interaction and track their progress for each attempt.

The start time and end time are recorded according to the server's time and will be used to track the elapsed time for users at each attempt on each learning interaction. It also provides ways of tracking total time spent on Flash learning interactions per course or per module instance.

The answered DB column (optional) provides a record of answers per questions that can be analysed to identify erroneous questions (i.e. impossible to answer correctly or the wrong answer is marked as correct), and questions that are too easy (i.e. waste user time):

=== Preliminary answer key idea: ===

  * n = not answered
  * w = wrong answer given
  * 0 - 100:int = grade for answer (should sum up to 100 in total for all questions)