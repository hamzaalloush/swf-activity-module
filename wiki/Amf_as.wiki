#summary The ActionScript class that handles communication with Moodle

Package: com.matbury.sam.data

Uses: com.matbury.sam.data.FlashVars

Connects to: MOODLE/lib/amfphp/services/...

----

== Description ==

The Amf class handles passing objects and arrays between Flash and Moodle.

----

= Public Properties =

=== Amf.array ===

A getter method that returns an array returned from remoting service.

=== Amf.obj ===

A getter method that returns an object returned from remoting service.

----

= Public Methods =

=== Amf():void (constructor) ===

Creates Amf object and calls NetConnection.connect() with remoting server.

=== Amf.getArray(object:Object):void ===

Sends a request object to the remoting server. If the request is successful, an array is returned and the Amf.GOT_DATA event is triggered.

=== Amf.getObj(object:Object):void ===

Sends a request object to the remoting server. If the request is successful, an object is returned and the Amf.GOT_DATA event is triggered.

=== Object parameters ===

The following parameters are accessed by com.matbury.sam.data.FlashVars:

  * object.instance (required if swfid is absent)
  * object.swfid (required if instance is absent)

The following parameters are added when pushing grades into Moodle's grade book with MOODLE/lib/amfphp/services/Grades.php:

  * object.feedback (String) = Specific feedback for user. Appears in rollover message in grade book
  * object.feedbackformat (int) = Flash client elapsed time in seconds. This item accumulative each time the grade is updated and measures the total time spent by the user on the SWF Activity Module instance
  * object.rawgrade (Number) = The raw grade pushed by the Flash client

Other parameters may be added to the Object as required by the service class methods the client is calling. In most cases the following parameters are handled in the service methods and do not need to be supplied:

  * object.course (int) = Moodle course ID
  * object.userid (int) = Moodle user ID
  * object.rawgrademax (Number) = The maximum permitted grade for this activity 0 - 100
  * object.rawgrademin (Number) = The minimum permitted grade for this activity 0 - 100
  * object.timemodified (int) = timestamp when grade is submitted
  * object.usermodified (int) = Moodle user ID of whoever alters that grade (grades can be edited manually in Moodle grade book)

----

= Events =

=== GOT_DATA ===

An object has been returned from Moodle.

=== FAULT ===

There was a problem and an error message generated by Moodle. Flash clients cannot read Moodle error messages. We need to provide better error reporting than this!

=== SECURITY_FAULT ===

The was a Flash Player Security Model violation. Usually caused by cross domain scripting.

----

= Examples =

== How to push a grade into grade_grades (Moodle grade book) ==

Here is an example script that creates a simple Flash client that pushes grades, elapsed time and feedback into grade_grades:

{{{
package {
	import flash.display.Sprite;
	import flash.display.StageScaleMode;
	import flash.display.StageAlign;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.text.*;
	import flash.utils.getTimer;
	import com.matbury.sam.data.FlashVars;
	import com.matbury.sam.data.Amf;
	
	public class GradePusher extends Sprite {
		
		private var _instructions:TextField;
		private var _input:TextField;
		private var _feedback:TextField;
		private var _results:TextField;
		private var _send:Sprite;
		private var _amf:Amf;
		
		public function GradePusher() {
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.align = StageAlign.TOP_LEFT;
			FlashVars.vars = this.root.loaderInfo.parameters;
			initDisplay();
			initAmf();
		}
		
		// Create the text fields, input boxes and Send Grade button
		private function initDisplay():void {
			var f:TextFormat = new TextFormat("Trebuchet MS",14,0,true);
			// Instructions
			_instructions = new TextField();
			_instructions.defaultTextFormat = f;
			_instructions.autoSize = TextFieldAutoSize.LEFT;
			_instructions.text = "Please input your desired grade (0 - 99) and any feedback you want to give your student:";
			addChild(_instructions);
			// Input text field for grade
			_input = new TextField();
			_input.type = TextFieldType.INPUT;
			_input.defaultTextFormat = f;
			_input.border = true;
			_input.restrict = "0-9";
			_input.maxChars = 2;
			_input.width = 100;
			_input.height = 22;
			_input.x = 2;
			_input.y = _instructions.y + _instructions.height + 4;
			_input.text = "";
			addChild(_input);
			// Input text field for feedback
			_feedback = new TextField();
			_feedback.type = TextFieldType.INPUT;
			_feedback.defaultTextFormat = f;
			_feedback.border = true;
			_feedback.width = stage.stageWidth - 4;
			_feedback.height = 22;
			_feedback.x = 2;
			_feedback.y = _input.y + _input.height + 4;
			_feedback.text = "";
			addChild(_feedback);
			// Send Grade button
			_send = new Sprite();
			_send.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
			_send.x = 5;
			_send.y = _feedback.y + _feedback.height + 4;
			_send.buttonMode = true;
			_send.mouseChildren = false;
			var label:TextField = new TextField();
			label.selectable = false;
			label.background = true;
			label.backgroundColor = 0xDDDDDD;
			label.defaultTextFormat = f;
			label.autoSize = TextFieldAutoSize.LEFT;
			label.text = "Send Grade";
			_send.addChild(label);
			addChild(_send);
			// Results text field - displays returned inserted/updated grade
			_results = new TextField();
			_results.wordWrap = true;
			f.bold = false;
			_results.defaultTextFormat = f;
			_results.width = stage.stageWidth;
			_results.y = _send.y + _send.height + 4;
			_results.height = stage.stageHeight - _results.y;
			_results.text = "Results:";
			addChild(_results);
		}
		
		// Mouse event handler calls function to send grade data to Moodle
		private function mouseDown(event:MouseEvent):void {
			if(_input.text == "") {
				_results.appendText("\nPlease input a grade.");
			} else {
				_results.text = "Results:";
				_results.appendText("\nAttempting to connect to Moodle...");
				setGrade();
			}
		}
		
		// Create new Amf object (calls NetConnection.connect())
		// Requires FlashVars.gateway parameter for a successful connection so
		// will only work when client is deployed in Moodle
		private function initAmf():void {
			_amf = new Amf();
		}
		
		// Call lib/amfphp/services/Grades.php::amf_grade_update()
		// to insert or update grade
		private function setGrade():void {
			_amf.addEventListener(Amf.GOT_DATA, gotGrade);
			_amf.addEventListener(Amf.FAULT, fault);
			var obj:Object = new Object();
			obj.swfid = FlashVars.swfid;
			obj.course = FlashVars.course;
			obj.instance = FlashVars.instance;
			obj.feedback = _feedback.text;
			obj.feedbackformat = Math.round(getTimer() / 1000); //_clock.seconds;
			obj.rawgrade = int(_input.text);
			obj.serviceFunction = "Grades.amf_grade_update";
			_amf.getObject(obj);
		}
		
		// lib/amfphp/services/Grades.php::amf_grade_update() returns the inserted/updated grade
		// Display the returned grade
		private function gotGrade(event:Event):void {
			_amf.removeEventListener(Amf.GOT_DATA, gotGrade);
			_amf.removeEventListener(Amf.FAULT, fault);
			_results.appendText("\n\nReturned grade:");
			for(var s:String in _amf.obj) {
				_results.appendText("\n" + s + " = " + _amf.obj[s]);
			}
		}
		
		// Error
		private function fault(event:Event):void {
			_amf.removeEventListener(Amf.GOT_DATA, gotGrade);
			_amf.removeEventListener(Amf.FAULT, fault);
			throw Error("Failed to connect to /lib/amfphp/services/Grades.php");
		}
	}
}
}}}